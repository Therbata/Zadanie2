# zadanie2 

Pipeline

---

## Opis dzia≈Çania workflowa i etapy

Workflow realizuje automatyczne budowanie, skanowanie i publikacjƒô obrazu Dockera aplikacji z zadania 1.

1. **Pobranie kodu ≈∫r√≥d≈Çowego** za pomocƒÖ `actions/checkout@v4`.
2. **Konfiguracja ≈õrodowiska `buildx`**, kt√≥re umo≈ºliwia budowanie obraz√≥w dla wielu architektur.
3. **Logowanie do rejestr√≥w DockerHub i GHCR** ‚Äì potrzebne do wykorzystania cache i publikacji obrazu.
4. **Generowanie tag√≥w** z wykorzystaniem `docker/metadata-action` ‚Äì np. `latest`, `sha-<hash>`, `vX.Y.Z`. 
5. **Budowanie lokalnego obrazu Docker** (tylko dla `linux/amd64`) ‚Äì z wykorzystaniem `outputs: type=docker`.
6. **Skanowanie obrazu lokalnego za pomocƒÖ Trivy** ‚Äì je≈õli wykryje podatno≈õci CRITICAL/HIGH, obraz nie jest publikowany. 
7. **Publikacja multiarchitekturnego obrazu (`linux/amd64`, `linux/arm64`) do GHCR**, tylko je≈õli build i skan zako≈ÑczƒÖ siƒô sukcesem.
8. **Wykorzystanie cache z DockerHub (`s99594/build-cache:latest`)**, zapis/odczyt z u≈ºyciem `type=registry`, `mode=max`.
---

## Zastosowa≈Çem Trivy, poniewa≈º:

- obs≈Çuguje skanowanie obraz√≥w lokalnych (bez potrzeby wcze≈õniejszego pushowania),
- umo≈ºliwia ustawienie poziomu krytyczno≈õci b≈Çƒôd√≥w (`CRITICAL,HIGH`),
- darmowy

---
s
## Tagowanie obraz√≥w

U≈ºy≈Çem `docker/metadata-action`, aby uzyskaƒá zautomatyzowane tagi:

- `latest`
- `sha-'
- semver


---

##  Cache warstw Dockera

Cache jest odczytywany i zapisywany do mojego publicznego repozytorium DockerHub (`s99594/build-cache:latest`), U≈ºy≈Çem:

- eksportera `registry`
- trybu `mode=max` 

≈πr√≥d≈Ça: 
-[https://docs.docker.com/build/cache/backends/registry/]
-(https://docs.docker.com/build/cache/backends/registry/)
-[https://github.com/docker/metadata-action]
-(https://github.com/docker/metadata-action)
-(https://github.com/docker/metadata-action)
-(https://github.com/aquasecurity/trivy-action)
-Instrukcja do laboratorium numer 10.
## üë§ Autor

- Jakub Kacper Kramek ‚Äì S99594
